-- Improved Auto Collect and Server Hop Script

-- Wait until the game and character are fully loaded
local function waitForCharacter()
    while not (game:IsLoaded() and game.Players.LocalPlayer and game.Players.LocalPlayer.Character) do
        task.wait()
    end
    local character = game.Players.LocalPlayer.Character
    while not character:FindFirstChild("HumanoidRootPart") do
        task.wait()
    end
    return character
end

local character = waitForCharacter()
local player = game.Players.LocalPlayer

-- Optionally disable menu if ForceField exists
if character:FindFirstChild("ForceField") then
    game:GetService("ReplicatedStorage").Remotes.Server.Combat.ToggleMenu:FireServer(false)
end

local menuGui = game:GetService("Players").chained2av.PlayerGui:FindFirstChild("Menu")
if menuGui and menuGui.Enabled then
    local menuButtons = menuGui:FindFirstChild("MenuButtons")
    local playButton = menuButtons and menuButtons:FindFirstChild("Play")
    if playButton then
        local virtualInputManager = game:GetService("VirtualInputManager")
        local buttonPos = playButton.AbsolutePosition + playButton.AbsoluteSize/2
        virtualInputManager:SendMouseButtonEvent(buttonPos.X, buttonPos.Y, 0, true, game, 0)
        virtualInputManager:SendMouseButtonEvent(buttonPos.X, buttonPos.Y, 0, false, game, 0)
    end
end

--------------------------------------------------------------------------------
-- Server Hop Functionality
--------------------------------------------------------------------------------
local function serverHop()
    print("Server hopping...")
    local PlaceID = game.PlaceId
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    
    -- Keep track of servers we've already tried
    local triedServers = {}
    local usedTeleportMethod = false
    
    -- Function to fetch server data
    local function fetchServers()
        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(
                "https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Desc&limit=100"
            ))
        end)
        
        if success then return result.data else return {} end
    end
    
    -- Main server hop loop with timeout
    local startTime = tick()
    local timeout = 30 -- Give up after 30 seconds and use forced teleport
    
    spawn(function()
        while not usedTeleportMethod and tick() - startTime < timeout do
            local servers = fetchServers()
            
            -- Filter and sort servers
            local validServers = {}
            for _, server in ipairs(servers) do
                local serverId = tostring(server.id)
                if not triedServers[serverId] and server.playing < server.maxPlayers and server.ping < 150 then
                    table.insert(validServers, server)
                end
            end
            
            -- Sort by player count (descending) to find active servers
            table.sort(validServers, function(a, b)
                return a.playing > b.playing
            end)
            
            -- Try to teleport to each server
            for _, server in ipairs(validServers) do
                local serverId = tostring(server.id)
                triedServers[serverId] = true
                print("Teleporting to server with " .. server.playing .. " players...")
                
                local success = pcall(function()
                    TeleportService:TeleportToPlaceInstance(PlaceID, serverId, Players.LocalPlayer)
                end)
                
                if success then
                    usedTeleportMethod = true
                    return
                end
                task.wait(0.5) -- Brief wait between attempts
            end
            
            task.wait(1)
        end
        
        -- Fallback teleport method if we couldn't find a server
        if not usedTeleportMethod then
            print("Server hop timed out, using fallback teleport...")
            TeleportService:Teleport(PlaceID, Players.LocalPlayer)
            usedTeleportMethod = true
        end
    end)
end


--------------------------------------------------------------------------------
-- Auto-Collect Functionality
--------------------------------------------------------------------------------
local function collectItems()
    local collectedCount = 0
    local ws = game:GetService("Workspace")
    local character = player.Character or player.CharacterAdded:Wait()

    local hrp = character:WaitForChild("HumanoidRootPart", 5)
    if not hrp then return 0 end

    -- Try to get the drops folder from a known location
    local dropsFolder = ws:FindFirstChild("Objects") and ws.Objects:FindFirstChild("Drops") or ws:FindFirstChild("Drops")
    
    if dropsFolder then
        for _, prompt in ipairs(dropsFolder:GetDescendants()) do
            if prompt:IsA("ProximityPrompt") then
                local parentObject = prompt.Parent
                local targetCFrame = nil

                if parentObject:IsA("BasePart") then
                    targetCFrame = parentObject.CFrame
                elseif parentObject:IsA("Model") and parentObject.PrimaryPart then
                    targetCFrame = parentObject.PrimaryPart.CFrame
                else
                    for _, child in ipairs(parentObject:GetChildren()) do
                        if child:IsA("BasePart") then
                            targetCFrame = child.CFrame
                            break
                        end
                    end
                end

                if targetCFrame then
                    -- Move the character close to the drop and fire its prompt repeatedly until it disappears or times out
                    local timeout = 5 -- seconds
                    local startTime = os.clock()
                    repeat
                        task.wait()
                        -- Ensure character exists
                        if not player.Character then
                            player.Character = player.CharacterAdded:Wait()
                            hrp = player.Character:WaitForChild("HumanoidRootPart")
                        end
                        local safeRadius = 20
                        local nearOther = false
                        for _, otherPlayer in ipairs(game:GetService("Players"):GetPlayers()) do
                            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                local distance = (otherPlayer.Character.HumanoidRootPart.Position - targetCFrame.Position).Magnitude
                                if distance < safeRadius then
                                    warn("Another player is nearby; skipping this drop.")
                                    nearOther = true
                                    break
                                end
                            end
                        end
                        if not nearOther then
                            hrp.CFrame = targetCFrame
                        else
                            break
                        end

                        fireproximityprompt(prompt)
                        if os.clock() - startTime > timeout then
                            warn("Timed out attempting to collect an item.")
                            break
                        end
                    until not prompt:IsDescendantOf(ws)
                    collectedCount = collectedCount + 1
                end
            end
        end
    end

    return collectedCount
end


--------------------------------------------------------------------------------
-- Handle Character Death
--------------------------------------------------------------------------------

local function setupDeathHandler()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        player.CharacterAdded:Wait()
        print("Character respawned")
    end)
end

--------------------------------------------------------------------------------
-- Main Loop
--------------------------------------------------------------------------------

spawn(function()
    setupDeathHandler()
    player.CharacterAdded:Connect(setupDeathHandler)
    
    while true do
        local itemsCollected = collectItems()
        if itemsCollected > 0 then
            print(itemsCollected .. " items collected!")
            serverHop()
        end
        task.wait(1)
    end
end)

spawn(function()
    while task.wait() do
        local dropsFolder = game:GetService("Workspace").Objects and game:GetService("Workspace").Objects:FindFirstChild("Drops")
        if dropsFolder then
            if #dropsFolder:GetChildren() == 0 then
                print("No drops available, server hopping...")
                serverHop()
            else
                local itemsCollected = collectItems()
                if itemsCollected > 0 then
                    print(itemsCollected .. " items collected!")
                    serverHop()
                end
            end
        end
    end
end);    

print("Auto collect and server hop script is running!")
queue_on_teleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/localplayer12/Roblox/refs/heads/main/Auto", true))()')
